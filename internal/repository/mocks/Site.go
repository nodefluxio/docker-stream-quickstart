// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "gitlab.com/nodefluxio/vanilla-dashboard/internal/entity"

	util "gitlab.com/nodefluxio/vanilla-dashboard/internal/pkg/util"
)

// Site is an autogenerated mock type for the Site type
type Site struct {
	mock.Mock
}

// AddStreamToSite provides a mock function with given fields: ctx, data
func (_m *Site) AddStreamToSite(ctx context.Context, data *entity.MapSiteStream) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MapSiteStream) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, data
func (_m *Site) Create(ctx context.Context, data *entity.Site) (*entity.Site, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.Site
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Site) *entity.Site); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Site) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *Site) Delete(ctx context.Context, ID uint64) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDetail provides a mock function with given fields: ctx, ID
func (_m *Site) GetDetail(ctx context.Context, ID uint64) (*entity.Site, error) {
	ret := _m.Called(ctx, ID)

	var r0 *entity.Site
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.Site); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailByStreamID provides a mock function with given fields: ctx, streamID
func (_m *Site) GetDetailByStreamID(ctx context.Context, streamID string) (*entity.Site, error) {
	ret := _m.Called(ctx, streamID)

	var r0 *entity.Site
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Site); ok {
		r0 = rf(ctx, streamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, streamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, paging
func (_m *Site) GetList(ctx context.Context, paging *util.Pagination) ([]*entity.Site, error) {
	ret := _m.Called(ctx, paging)

	var r0 []*entity.Site
	if rf, ok := ret.Get(0).(func(context.Context, *util.Pagination) []*entity.Site); ok {
		r0 = rf(ctx, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.Pagination) error); ok {
		r1 = rf(ctx, paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMapStreamSiteByStreamID provides a mock function with given fields: ctx, streamID
func (_m *Site) GetMapStreamSiteByStreamID(ctx context.Context, streamID string) (*entity.MapSiteStream, error) {
	ret := _m.Called(ctx, streamID)

	var r0 *entity.MapSiteStream
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.MapSiteStream); ok {
		r0 = rf(ctx, streamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MapSiteStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, streamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteByIDs provides a mock function with given fields: ctx, IDs
func (_m *Site) GetSiteByIDs(ctx context.Context, IDs []int64) ([]*entity.Site, error) {
	ret := _m.Called(ctx, IDs)

	var r0 []*entity.Site
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*entity.Site); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteWithStream provides a mock function with given fields: ctx, IDs
func (_m *Site) GetSiteWithStream(ctx context.Context, IDs []int64) ([]*entity.SiteWithStream, error) {
	ret := _m.Called(ctx, IDs)

	var r0 []*entity.SiteWithStream
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*entity.SiteWithStream); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.SiteWithStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *Site) Update(ctx context.Context, data *entity.Site) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Site) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
